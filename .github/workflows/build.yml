# GitHub Actions Workflow created for testing the plugin in three steps:
# - test using Gradle tasks, such as tes and verifyPlugin,
# - test building process by preparing the artifact using buildPlugin Gradle task,
# - run IntelliJ Plugin Verifier.
#
# Workflow is triggered on push or pull request event.
#
# Docs:
# - GitHub Actions: https://help.github.com/en/actions
# - IntelliJ Plugin Verifier GitHub Action: https://github.com/ChrisCarini/intellij-platform-plugin-verifier-action

name: Build
on: [push, pull_request]

jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2
      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

  # Run verifyPlugin and test Gradle tasks.
  test:
    name: Test
    needs: gradleValidation
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2
      # Setup Java 1.8 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      # Cache Gradle dependencies
      - name: Setup Cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
      # Run detekt
      - name: Run Linter
        run: ./gradlew detekt
      # Run verifyPlugin Gradle task
      - name: Verify Plugin
        run: ./gradlew verifyPlugin --no-daemon
      # Run test Gradle task
      - name: Run Tests
        run: ./gradlew test --no-daemon

  # Build plugin with buildPlugin Gradle task and provide artifact for the next workflow jobs.
  # Requires test job to be passed.
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.properties.outputs.name }}
      version: ${{ steps.properties.outputs.version }}
      artifact: ${{ steps.properties.outputs.name }}-${{ steps.properties.outputs.version }}.zip
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2
      # Setup Java 1.8 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      # Cache Gradle dependencies
      - name: Setup Cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
      # Set VERSION and NAME environment variables for the steps reading properties directly from Gradle setup
      - name: Export Properties
        id: properties
        run: |
          echo "::set-output name=version::$(./gradlew properties --no-daemon --console=plain -q | grep "^version:" | awk '{printf $2}')"
          echo "::set-output name=name::$(./gradlew properties --no-daemon --console=plain -q | grep "^name:" | awk '{printf $2}')"
          echo "::set-output name=changelog::$(./gradlew getChangelog --no-daemon --console=plain -q)"
      # Build artifact using buildPlugin Gradle task
      - name: Build Plugin
        run: ./gradlew buildPlugin --no-daemon
      # Upload plugin artifact to make it available in the next jobs
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: plugin-artifact
          path: ./build/distributions/${{ needs.build.outputs.artifact }}

  # Verify built plugin using IntelliJ Plugin Verifier tool.
  # Requires build job to be passed.
  verify:
    name: Verify
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Download plugin artifact provided by the previous job
      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: plugin-artifact
      # Run IntelliJ Plugin Verifier action using GitHub Action
      - name: Verify Plugin
        id: verify
        uses: ChrisCarini/intellij-platform-plugin-verifier-action@v0.0.2
        with:
          plugin-location: plugin-artifact/${{ needs.build.outputs.artifact }}
          ide-versions: |
            ideaIC:2020.1
#            ideaIC:LATEST-EAP-SNAPSHOT
      # Print the output of the verify step
      - name: Print Logs
        env:
          OUTPUT_LOG: ${{ steps.verify.outputs.verification-output-log-filename }}
        run: |
          echo "The verifier log file [$OUTPUT_LOG] contents : " ;
          cat $OUTPUT_LOG

  # Prepare a draft release for GitHub Releases page for the manual verification.
  # If accepted and published, release workflow would be triggered.
  releaseDraft:
    name: Release Draft
#    if: github.ref == 'refs/heads/master'
    needs: [build, verify]
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2
      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
            | tr '\r\n' ' ' \
            | jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' \
          curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/{}
      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        id: createDraft
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.version }}
          release_name: v${{ needs.build.outputs.version }}
          body: ${{ needs.build.outputs.changelog }}
          draft: true
      # Download plugin artifact provided by the previous job
      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: plugin-artifact
      # Upload artifact as a release asset
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.createDraft.outputs.upload_url }}
          asset_path: ./plugin-artifact/${{ needs.build.outputs.artifact }}
          asset_name: ${{ needs.build.outputs.artifact }}
          asset_content_type: application/zip
